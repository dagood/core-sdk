<Project>

  <!-- TODO: Move this file (implementing source-build targets) to Arcade. -->

  <!--
    These targets inject source-build into Arcade's build process.
  -->

  <PropertyGroup>
    <SourceBuildOutputDir Condition="'$(SourceBuildOutputDir)' == ''">$([MSBuild]::NormalizeDirectory('$(ArtifactsDir)', 'source-build'))</SourceBuildOutputDir>
    <SourceBuildSelfDir>$([MSBuild]::NormalizeDirectory('$(SourceBuildOutputDir)', 'self'))</SourceBuildSelfDir>
    <CurrentRepoSourceBuildArtifactsDir>$([MSBuild]::NormalizeDirectory('$(SourceBuildSelfDir)', 'artifacts'))</CurrentRepoSourceBuildArtifactsDir>
    <CurrentRepoSourceBuildSourceDir>$([MSBuild]::NormalizeDirectory('$(SourceBuildSelfDir)', 'src'))</CurrentRepoSourceBuildSourceDir>
    <CurrentRepoSourceBuildPackageCache>$([MSBuild]::NormalizeDirectory('$(SourceBuildSelfDir)', 'package-cache'))</CurrentRepoSourceBuildPackageCache>

    <CurrentRepoSourceBuildArtifactsPackagesDir>$([MSBuild]::NormalizeDirectory('$(CurrentRepoSourceBuildArtifactsDir)', 'packages', '$(Configuration)'))</CurrentRepoSourceBuildArtifactsPackagesDir>
    <CurrentRepoSourceBuildBinlogFile>$([MSBuild]::NormalizePath('$(CurrentRepoSourceBuildArtifactsDir)', 'sourcebuild.binlog'))</CurrentRepoSourceBuildBinlogFile>

    <InnerSourceBuildRepoRoot Condition="'$(InnerSourceBuildRepoRoot)' == ''">$(CurrentRepoSourceBuildSourceDir)</InnerSourceBuildRepoRoot>

    <CleanInnerSourceBuildRepoRoot Condition="'$(CleanInnerSourceBuildRepoRoot)' == ''">true</CleanInnerSourceBuildRepoRoot>
  </PropertyGroup>

  <PropertyGroup>
    <SourceBuildEngineeringDir>$([MSBuild]::NormalizeDirectory('$(RepositoryEngineeringDir)', 'source-build'))</SourceBuildEngineeringDir>
    <LocalNuGetPackagesRoot>$(CurrentRepoSourceBuildPackageCache)</LocalNuGetPackagesRoot>

    <ToolsLocalDir>$(SourceBuildEngineeringDir)tools-local/</ToolsLocalDir>
    <TaskDir>$(ToolsLocalDir)tasks/</TaskDir>
    <XPlatTasksBinDir>$(TaskDir)Microsoft.DotNet.SourceBuild.Tasks.XPlat/bin/$(Configuration)/netstandard2.0/</XPlatTasksBinDir>
    <XPlatSourceBuildTasksAssembly>$(XPlatTasksBinDir)Microsoft.DotNet.SourceBuild.Tasks.XPlat.dll</XPlatSourceBuildTasksAssembly>

    <DotNetCliToolDir>$([MSBuild]::NormalizeDirectory('$(DotNetRoot)'))</DotNetCliToolDir>
  </PropertyGroup>

  <Target Name="ExecuteWithSourceBuiltTooling"
          DependsOnTargets="
            BuildUpstreamRepos;
            GetSourceBuildCommandConfiguration;
            RunInnerSourceBuildCommand;
            PackSourceBuildIntermediateNupkg;
            PackSourceBuildTarball"
          Condition="
            '$(FromSource)' == 'true' and
            '$(InnerBuildFromSource)' != 'true'"
          BeforeTargets="Execute" />

  <!--
    Separate target to execute to provide easy hook point for BeforeTargets that will only trigger
    when the inner build is actually happening. Hooking BeforeTargets on
    ExecuteWithSourceBuiltTooling runs unconditionally, for example, inside the core-sdk build.
  -->
  <Target Name="ExecuteInnerSourceBuild"
          Condition="
            '$(FromSource)' == 'true' and
            '$(InnerBuildFromSource)' == 'true'"
          BeforeTargets="Execute" />

  <Target Name="BuildUpstreamRepos"
          Condition="'$(BuildUpstreamRepos)' == 'true'">
    <MSBuild
      Projects="$(SourceBuildEngineeringDir)build.proj"
      Targets="PrepareOutput;InitBuild"
      Properties="RepoRoot=$(RepoRoot)" />

    <PropertyGroup>
      <SourceBuildProjectFilename Condition="'$(SourceBuildProjectFilename)' == ''">$(GitHubRepositoryName).proj</SourceBuildProjectFilename>
    </PropertyGroup>

    <MSBuild
      Projects="$(SourceBuildEngineeringDir)repos\$(SourceBuildProjectFilename)"
      Targets="BuildRepoReferences"
      Properties="RepoRoot=$(RepoRoot)"
      StopOnFirstFailure="true" />
    <!-- TODO: (arcade-sb) Support building upstreams from source based on int nupkgs. -->
  </Target>

  <!--
    Set up build args to append to the passed build command. These args specify what is unique about
    building from source, such as non-overlapping artifacts dirs and package caches. This target can
    be BeforeTargets'd or replaced to customize source-build.
  -->
  <Target Name="GetSourceBuildCommandConfiguration">
    <PropertyGroup>
      <!-- Track that this is the inner build to prevent infinite recursion. -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:InnerBuildFromSource=true</InnerBuildArgs>
      <!-- Set DotNetBuildFromSource to avoid publishing. -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:DotNetBuildFromSource=true</InnerBuildArgs>
      <!-- Use a fresh clone of the repo so that source-build modifications are isolated. -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:RepoRoot=$(InnerSourceBuildRepoRoot)</InnerBuildArgs>
      <!-- Override the artifacts dir to cleanly separate the inner build from outer build. -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:ArtifactsDir=$(CurrentRepoSourceBuildArtifactsDir)</InnerBuildArgs>
      <!-- Set a custom binlog location to avoid clashing over the currenly specified file. -->
      <InnerBuildArgs>$(InnerBuildArgs) /bl:$(CurrentRepoSourceBuildBinlogFile)</InnerBuildArgs>

      <!-- Let the inner build use the outer build's copy of the source-build tasks. -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:XPlatSourceBuildTasksAssembly=$(XPlatSourceBuildTasksAssembly)</InnerBuildArgs>
      <!-- The inner build needs to reference the overall output dir for nupkg transport etc. -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:SourceBuildOutputDir=$(SourceBuildOutputDir)</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:SourceBuiltBlobFeedDir=$(SourceBuiltBlobFeedDir)</InnerBuildArgs>

      <!-- Work around issue where local clone may cause failure using non-origin remote fallback: https://github.com/dotnet/sourcelink/issues/629 -->
      <InnerBuildArgs>$(InnerBuildArgs) /p:EnableSourceControlManagerQueries=false</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:EnableSourceLink=false</InnerBuildArgs>
      <InnerBuildArgs>$(InnerBuildArgs) /p:DeterministicSourcePaths=false</InnerBuildArgs>
    </PropertyGroup>

    <ItemGroup>
      <!-- Override package cache to separate source-built packages from upstream. -->
      <InnerBuildEnv Include="NUGET_PACKAGES=$(CurrentRepoSourceBuildPackageCache)" />
    </ItemGroup>
  </Target>

  <!--
    Clone the repo to a new location. Source-build targets will change the source dynamically.
    Creating a fresh clone avoids overwriting existing work or making subtle changes that might
    accidentally get added to the user's existing work via a 'git add .'. Since the clone also has
    access to the git data, this also makes it easy to see what changes the source-build infra has
    made, for diagnosis or exploratory purposes.
  -->
  <Target Name="PrepareInnerSourceBuildRepoRoot">
    <PropertyGroup>
      <_GitCloneToDirArgs />
      <_GitCloneToDirArgs>$(_GitCloneToDirArgs) --source &quot;$(RepoRoot)&quot;</_GitCloneToDirArgs>
      <_GitCloneToDirArgs>$(_GitCloneToDirArgs) --dest &quot;$(InnerSourceBuildRepoRoot)&quot;</_GitCloneToDirArgs>
      <_GitCloneToDirArgs>$(_GitCloneToDirArgs) --copy-wip</_GitCloneToDirArgs>

      <_GitCloneToDirArgs Condition="'$(CleanInnerSourceBuildRepoRoot)' == 'true'">$(_GitCloneToDirArgs) --clean</_GitCloneToDirArgs>
    </PropertyGroup>

    <Exec Command="$(MSBuildThisFileDirectory)git-clone-to-dir.sh $(_GitCloneToDirArgs)" />
  </Target>

  <Target Name="RunInnerSourceBuildCommand"
          DependsOnTargets="PrepareInnerSourceBuildRepoRoot">
    <PropertyGroup>
      <!-- Prevent any projects from building in the outside build: they would use prebuilts. -->
      <PreventPrebuiltBuild>true</PreventPrebuiltBuild>

      <!--
        Normally, the inner build should run using the original build command with some extra args
        appended. Allow the repo to override this default behavior if the repo is e.g. not onboarded
        enough on Arcade for this to work nicely.
      -->
      <BaseInnerSourceBuildCommand Condition="'$(BaseInnerSourceBuildCommand)' == ''">$(ARCADE_BUILD_TOOL_COMMAND)</BaseInnerSourceBuildCommand>
      <!-- TODO: (arcade-sb) Remove prototype fallback after Arcade shared build.sh update. Actual: ARCADE_BUILD_TOOL_COMMAND -->
      <BaseInnerSourceBuildCommand Condition="'$(BaseInnerSourceBuildCommand)' == ''">$(REPO_BUILD_TOOL_COMMAND)</BaseInnerSourceBuildCommand>
    </PropertyGroup>

    <Exec
      Command="$(BaseInnerSourceBuildCommand) $(InnerBuildArgs)"
      WorkingDirectory="$(InnerSourceBuildRepoRoot)"
      EnvironmentVariables="@(InnerBuildEnv)"
      IgnoreStandardErrorWarningFormat="true" />
  </Target>

  <!--
    TODO: Combine with SBRP work. Included here to make merge conflict resolution in the
    DependsOnTargets more obvious.
  -->
  <Target Name="PackSourceBuildIntermediateNupkg" />

  <Target Name="PreventPrebuiltBuild"
          DependsOnTargets="ExecuteWithSourceBuiltTooling"
          Condition="'$(PreventPrebuiltBuild)' == 'true'"
          BeforeTargets="Execute">
    <ItemGroup>
      <ProjectToBuild Remove="@(ProjectToBuild)" />
      <ProjectToBuild Include="$(MSBuildThisFileDirectory)Noop.proj" />
    </ItemGroup>
  </Target>

</Project>
